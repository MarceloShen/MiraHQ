Heap Sort:

Max Heap: a binary tree, but with each parent nodes greater than its children node

This sorting algorithm is about finding the maximum elements using heaps, and putting those maximum elements at the end of the array in order

1. build a max heap of elements in array arr
2. 1st element contains the max value, so swap it with the last element in the "unsorted" part of the array. This element is now in the "sorted" part of the array
3. heapify (remake the max heap so the next maximum element is on top of the heap), excluding the sorted last element, and decrease the length of the heap by 1
4. repeat steps 2 and 3 until the array is sorted

time complexity: O(n*log(n))

-------------------------------------------------------------------
Round 1:

Input data: 4, 10, 3, 5, 1
         4(0)
        /   \
     10(1)   3(2)
    /   \
 5(3)    1(4)

The numbers in bracket represent the indices in the array 
representation of data.

Applying heapify procedure to index 1:
         4(0)
        /   \
    10(1)    3(2)
    /   \
5(3)    1(4)

Applying heapify procedure to index 0:
        10(0)
        /  \
     5(1)  3(2)
    /   \
 4(3)    1(4)
The heapify procedure calls itself recursively to build heap
 in top down manner.

After heapify at index 0, swap index 0 with the last index in the heap, then isolate the last index from the heap
-------------------------------------------------------------------
Round 2:

Input data: 4, 3, 5, 1
         1(0)
        /   \
     5(1)   3(2)
    /   
 4(3)    10(4) <- isolated

The numbers in bracket represent the indices in the array 
representation of data.

Applying heapify procedure to index 1:
         1(0)
        /   \
     5(1)    3(2)
    /  
4(3)    10(4)

Applying heapify procedure to index 0:
        5(0)
        /  \
     1(1)  3(2)
    /   
 4(3)   10(4)

Swap index 0 with the last index in the heap, then isolate the last index from the heap
        4(0)
        /  \
     1(1)  3(2)
       
 5(3)   10(4) <- isolated